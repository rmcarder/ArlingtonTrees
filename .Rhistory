colnames(PaymentsCommittedApprovalYear)<-c("Program","Year","Approved2016","Approved2017","Approved2018","Approved2019","Approved2020")
colnames(PaymentsCommittedtoQuarter)<-c("Program","Year","Approved2016","Approved2017","Approved2018","Approved2019","Approved2020")
colnames(ThemePaymentsCommittedApprovalYear)<-c("Program","Theme","Year","Approved2016","Approved2017","Approved2018","Approved2019","Approved2020","ThemeId")
colnames(ThemePaymentsCommittedApprovalYeartoQuarter)<-c("Program","Theme","Year","Approved2016","Approved2017","Approved2018","Approved2019","Approved2020","ThemeId")
BudgetsMaster<-ProgramBudgets %>%
left_join(PaymentsCommittedApprovalYear, by=c("ParentPath"="Program"))%>%
replace(., is.na(.), 0)%>%
mutate(ApprovedBefore2020=Approved2016+Approved2017+Approved2018+Approved2019,
Delegation2020=Budget2020-ApprovedBefore2020)%>%
left_join(PaymentsCommitted,by=c("ParentPath"="Program"))%>%
replace(., is.na(.), 0)%>%
dplyr::select(-Year)%>%
mutate(PercentBudgetSpent=TotalCommitted2020/Budget2020,
PercentDelegationApproved=Approved2020/Delegation2020,
RemainingBudget2020=ifelse((Budget2020-TotalCommitted2020)>=0,Budget2020-TotalCommitted2020,0),
OverBudget2020=ifelse((Budget2020-TotalCommitted2020)<=0,abs(Budget2020-TotalCommitted2020),0))%>%
dplyr::rename(Program=ParentPath)
BudgetsMastertoQuarter<-ProgramBudgets %>%
left_join(PaymentsCommittedtoQuarter, by=c("ParentPath"="Program"))%>%
replace(., is.na(.), 0)%>%
mutate(ApprovedBefore2020=Approved2016+Approved2017+Approved2018+Approved2019,
Delegation2020=Budget2020-ApprovedBefore2020)%>%
left_join(PaymentsCommitted,by=c("ParentPath"="Program"))%>%
replace(., is.na(.), 0)%>%
dplyr::select(-Year)%>%
mutate(PercentBudgetSpent=TotalCommitted2020/Budget2020,
PercentDelegationApproved=Approved2020/Delegation2020,
RemainingBudget2020=ifelse((Budget2020-TotalCommitted2020)>=0,Budget2020-TotalCommitted2020,0),
OverBudget2020=ifelse((Budget2020-TotalCommitted2020)<=0,abs(Budget2020-TotalCommitted2020),0))%>%
dplyr::rename(Program=ParentPath)
ThemeBudgetsMaster<-ThemeBudgets %>%
left_join(ThemePaymentsCommittedApprovalYear, by=c("ThemeId"="ThemeId"))%>%
filter(!is.na(Year))%>%
replace(., is.na(.), 0)%>%
mutate(ApprovedBefore2020=Approved2016+Approved2017+Approved2018+Approved2019,
Delegation2020=Budget2020-ApprovedBefore2020)%>%
left_join(ThemePaymentsCommitted,by=c("ThemeId"="ThemeId"))%>%
replace(., is.na(.), 0)%>%
dplyr::select(c(-Year,-Program.x,-Theme.x,-Program.y,-Theme.y,-ThemeId))%>%
mutate(PercentBudgetSpent=TotalCommitted2020/Budget2020,
PercentDelegationApproved=Approved2020/Delegation2020,
RemainingBudget2020=ifelse((Budget2020-TotalCommitted2020)>=0,Budget2020-TotalCommitted2020,0),
OverBudget2020=ifelse((Budget2020-TotalCommitted2020)<=0,abs(Budget2020-TotalCommitted2020),0))%>%
#filter(ParentPath!="Climate"&ParentPath!="Exec")%>%
dplyr::rename(Program=ParentPath)%>%
dplyr::rename(Theme=Description)
ThemeBudgetsMastertoQuarter<-ThemeBudgets %>%
left_join(ThemePaymentsCommittedApprovalYeartoQuarter, by=c("ThemeId"="ThemeId"))%>%
filter(!is.na(Year))%>%
replace(., is.na(.), 0)%>%
mutate(ApprovedBefore2020=Approved2016+Approved2017+Approved2018+Approved2019,
Delegation2020=Budget2020-ApprovedBefore2020)%>%
left_join(ThemePaymentsCommitted,by=c("ThemeId"="ThemeId"))%>%
replace(., is.na(.), 0)%>%
dplyr::select(c(-Year,-Program.x,-Theme.x,-Program.y,-Theme.y,-ThemeId))%>%
mutate(PercentBudgetSpent=TotalCommitted2020/Budget2020,
PercentDelegationApproved=Approved2020/Delegation2020,
RemainingBudget2020=ifelse((Budget2020-TotalCommitted2020)>=0,Budget2020-TotalCommitted2020,0),
OverBudget2020=ifelse((Budget2020-TotalCommitted2020)<=0,abs(Budget2020-TotalCommitted2020),0))%>%
# filter(ParentPath!="Climate"&ParentPath!="Exec")%>%
dplyr::rename(Program=ParentPath)%>%
dplyr::rename(Theme=Description)
ProgramCombinedJoin<-BudgetsMaster%>%
filter(Program=="Climate"|Program=="Exec")%>%
mutate(Theme="Combined")
ThemeBudgetsMaster<-ThemeBudgetsMaster%>%
bind_rows(ProgramCombinedJoin)
paymentsfordashboards<-payments%>%
left_join(USGeoLookupTable,by=c("Geography_Description"="Geography_Description"))%>%
mutate(StateAllocation=coalesce(StateAllocation,1),
Geography=coalesce(State.y,Geography_Description))%>%
mutate(Amount=SplitPaymentAmount*StateAllocation,
ProgramTheme=paste(Program,Theme,sep=' - '))%>%
mutate(ProgramJoinField=paste(Program,Theme,sep=''))%>%
left_join(FiveYearPlan,by="ProgramJoinField")
allocationtest<-aggregate(paymentsfordashboards$SplitGrantPercent ~ paymentsfordashboards$RequestId, data = paymentsfordashboards, FUN = sum)
OrgBudgetsJoin<-OrganizationBudgets_Raw%>%
# filter(IncludeInCalculations==1)%>%
dplyr::select(3,6,7,8,23)%>%
mutate(JoinField=paste(OrganizationId,YearNum,sep='-'))
RecentBudgets<-payments%>%
group_by(OrganizationId,Name,Year)%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
summarise(amount=sum(SplitPaymentAmount))%>%
mutate(JoinField=paste(OrganizationId,Year,sep='-'))%>%
left_join(OrgBudgetsJoin,by="JoinField")%>%
mutate(Percent=amount/ExpensesTotal)%>%
group_by(Name)%>%
top_n(1,YearNum)%>%
ungroup()%>%
mutate(Quartile = ntile(ExpensesTotal,4),
Percentile=ntile(ExpensesTotal,100))
RecentBudgetsActive<-payments%>%
filter(ProjectEndDate>=Sys.Date())%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
group_by(OrganizationId,Name,Year)%>%
summarise(amount=sum(SplitPaymentAmount),Programs=paste(unique(Program),collapse = ","))%>%
mutate(JoinField=paste(OrganizationId,Year,sep='-'))%>%
left_join(OrgBudgetsJoin,by="JoinField")%>%
mutate(Percent=amount/ExpensesTotal)%>%
group_by(Name)%>%
top_n(1,YearNum)%>%
ungroup()%>%
mutate(Quartile = ntile(ExpensesTotal,4),
Percentile=ntile(ExpensesTotal,100))%>%
dplyr::select(1,2,3,4,5,8,9,12,13,14)%>%
dplyr::rename("Most Recent Budget Year"=3,
"Total WPF Payments"=4,
"Revenue"=6,
"Expenses"=7,
"WPF Percent of Budget"=8)%>%
arrange(-Expenses)
RecentBudgetsActive$`WPF Percent of Budget`<-percent(RecentBudgetsActive$`WPF Percent of Budget`,0)
ProgramBudgetsActive<-payments%>%
filter(ProjectEndDate>=Sys.Date())%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
group_by(OrganizationId,Program)%>%
summarise(Amount=sum(SplitPaymentAmount))%>%
left_join(RecentBudgetsActive,by=c("OrganizationId"="OrganizationId.x"))%>%
ungroup()%>%
dplyr::select(-1,-3,-7,-8)%>%
arrange(-Expenses)
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Data and Reports - Documents/Display/Organizational Budgets")
for (i in ProgramBudgetsActive$Program){
bud<-ProgramBudgetsActive%>%
filter(Program==i)%>%
filter(!is.na(Name))%>%
arrange(-Expenses)
write.csv(bud,paste(i," Org Budgets.csv",sep=''),row.names = FALSE)
}
#RecentBudgetsActive$Revenue<-currency(RecentBudgetsActive$Revenue,digits = 0)
#RecentBudgetsActive$Expenses<-currency(RecentBudgetsActive$Expenses,digits = 0)
#RecentBudgetsActive$`Total WPF Payments`<-currency(RecentBudgetsActive$`Total WPF Payments`,digits = 0)
ActiveOrgs<-payments%>%
filter(ProjectEndDate>=Sys.Date())%>%
group_by(OrganizationId,Name,AddressCat)%>%
summarize(Programs=paste(unique(Program),collapse=', '),
Geographies=paste(unique(Geography_Description),collapse=', '))%>%
left_join(RecentBudgets,by=c("OrganizationId"="OrganizationId.x"))%>%
mutate(WPFofBudget=percent(Percent))%>%
ungroup()%>%
dplyr::select(-1,-7,10,-11)%>%
dplyr::select(-5,-6,-7,-8,-9,-10,-11)
#unique(ApplicationFields$Name)
###Intermediaries and Intake Forms###
RequestTags<-HasTags%>%
left_join(Tags, by="TagId")%>%
group_by(RequestId)%>%
summarise(Tags=paste(unique(Name),collapse=', '))
OrganizationTags<-HasTags%>%
left_join(Tags, by="TagId")%>%
group_by(OrganizationId)%>%
summarise(Tags=paste(unique(Name),collapse=', '))
regrantingNumbers<-ApplicationFields%>%
filter(str_detect(Name,"doesthisproposalincluderegrantingtothird"))
funderNumbers<-ApplicationFields%>%
filter(str_detect(Name,"funder1|funder2|funder3"))
##Org Level
WomensFundOrgTag<-OrganizationTags%>%
filter(str_detect(Tags,"women's fund"))%>%
mutate(WomensFundOrgTag=1)%>%
dplyr::select(-2)
IntermediaryOrgTag<-OrganizationTags%>%
filter(str_detect(Tags,"Intermediary"))%>%
mutate(IntermediaryOrgTag=1)%>%
dplyr::select(-2)
LocalFundOrgTag<-OrganizationTags%>%
filter(str_detect(Tags,"local fund"))%>%
mutate(LocalFundOrgTag=1)%>%
dplyr::select(-2)
Big7Org<-payments %>%
filter(Name=="New Venture Fund"|Name=="The Tides Foundation"|Name=="Tides Foundation"|Name=="Borealis Philanthropy"|Name=="NEO Philanthropy"|Name=="The Proteus Fund"|Name=="Proteus Fund"|Name=="Fund for Global Human Rights"|Name=="Tides Center"|Name=="Astraea Lesbian Foundation for Justice")%>%
group_by(OrganizationId)%>%
summarize(Big7Org=1)
#Request Level
IntermediaryRequestTag<-RequestTags%>%
filter(str_detect(Tags,"Intermediary"))%>%
mutate(IntermediaryRequestTag=1)%>%
dplyr::select(-2)
RegrantingCode<-payments%>%
filter(SupportType=="Regranting/Pooled")%>%
group_by(RequestId)%>%
summarise(RegrantingCode=1)
GenOpsCode<-payments%>%
filter(SupportType=="Gen Ops")%>%
group_by(RequestId)%>%
summarise(GenOpsCode=1)
WomensFundRequestTag<-RequestTags%>%
filter(str_detect(Tags,"women's fund 2019"))%>%
mutate(WomensFundRequestTag=1)%>%
dplyr::select(-2)
LocalFundRequestTag<-RequestTags%>%
filter(str_detect(Tags,"local fund"))%>%
mutate(LocalFundRequestTag=1)%>%
dplyr::select(-2)
ApplicationRegranting<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% regrantingNumbers$ApplicationFieldId)%>%
group_by(RequestId)%>%
summarise(Regranting=paste(unique(Value),collapse = ", "))%>%
filter(str_detect(Regranting,"Yes")|Regranting==1)%>%
mutate(ApplicationRegranting=1)%>%
dplyr::select(-2)
funders<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% funderNumbers$ApplicationFieldId)%>%
group_by(RequestId,Name)%>%
summarise(Value=first(Value))%>%
pivot_wider(names_from = Name,values_from = Value)
RegrantingOrgs<-payments%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
filter(ProjectEndDate>=Sys.Date())%>%
left_join(IntermediaryOrgTag, by="OrganizationId")%>%
left_join(WomensFundOrgTag, by="OrganizationId")%>%
left_join(LocalFundOrgTag, by="OrganizationId")%>%
anti_join(Big7Org,by="OrganizationId")%>%
left_join(IntermediaryRequestTag,by="RequestId")%>%
left_join(WomensFundRequestTag,by="RequestId")%>%
left_join(LocalFundRequestTag,by="RequestId")%>%
left_join(RegrantingCode,by="RequestId")%>%
left_join(GenOpsCode,by="RequestId")%>%
left_join(ApplicationRegranting,by="RequestId")%>%
filter(WomensFundOrgTag==1|LocalFundOrgTag==1|IntermediaryOrgTag==1|
IntermediaryRequestTag==1|WomensFundRequestTag==1|LocalFundRequestTag==1|RegrantingCode==1|ApplicationRegranting==1)%>%
group_by(Name,ProjectTitle)%>%
summarise(WomensFundOrgTag=first(WomensFundOrgTag),
LocalFundOrgTag=first(LocalFundOrgTag),
IntermediaryOrgTag=first(IntermediaryOrgTag),
#  Big7Org=first(Big7Org),
IntermediaryRequestTag=first(IntermediaryRequestTag),
WomensFundRequestTag=first(WomensFundRequestTag),
LocalFundRequestTag=first(LocalFundRequestTag),
RegrantingCode=first(RegrantingCode),
GenOpsCode=first(GenOpsCode),
ApplicationRegranting=first(ApplicationRegranting),
Programs=paste(unique(Program),collapse=', '),
Location=first(Clean.Name),
GeoServed=paste(unique(Geography_Description),collapse=', '),
ActiveAmount=sum(SplitPaymentAmount))
WomensLocalFunds<-payments%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
filter(ProjectEndDate>=Sys.Date())%>%
left_join(WomensFundOrgTag, by="OrganizationId")%>%
left_join(LocalFundOrgTag, by="OrganizationId")%>%
left_join(WomensFundRequestTag,by="RequestId")%>%
left_join(LocalFundRequestTag,by="RequestId")%>%
filter(WomensFundOrgTag==1|LocalFundOrgTag==1|WomensFundRequestTag==1|LocalFundRequestTag==1)%>%
group_by(RequestId,Name,ProjectTitle)%>%
summarise(WomensFundOrgTag=first(WomensFundOrgTag),
LocalFundOrgTag=first(LocalFundOrgTag),
WomensFundRequestTag=first(WomensFundRequestTag),
LocalFundRequestTag=first(LocalFundRequestTag),
Programs=paste(unique(Program),collapse=', '),
Location=first(Clean.Name),
GeoServed=paste(unique(Geography_Description),collapse=', '),
ActiveAmount=sum(SplitPaymentAmount))
WomensLocalFunds<-WomensLocalFunds%>%
arrange(Name)
approvedlong<-master%>%
filter(Statuses_Status.x=="Approved"&GrantFiscalYear==2020)%>%
pivot_longer(Pay2020:Pay2023,names_to = "Scheduled Disbursement Year", values_to = "Amount")
bankfields<-ApplicationFields%>%
filter(str_detect(DisplayName,"Bank")&str_detect(DisplayName,"Confirmation",negate = TRUE))
ApplicationRegranting<-IntakeEntries%>%
left_join(IntakeEntryAnswers,by="IntakeEntryId")%>%
left_join(ApplicationFields,by="ApplicationFieldId")%>%
filter(ApplicationFieldId %in% bankfields$ApplicationFieldId)%>%
group_by(RequestId)%>%
summarise(Regranting=paste(unique(Value),collapse = ", "))%>%
filter(str_detect(Regranting,"Yes")|Regranting==1)%>%
mutate(ApplicationRegranting=1)%>%
dplyr::select(-2)
text2<-text%>%
group_by(RequestID)%>%
summarize(StatementOfPurpose=first(StatementOfPurpose),
ProposalSummary=first(ProposalSummary),
AnalysisAndRecommendations=first(AnalysisAndRecommendations))
joinedText<-payments%>%
filter(Statuses_Status.x=="Approved")%>%
left_join(text2, by=c("RequestId"="RequestID"))%>%
group_by(RequestId,Name,ProjectTitle,StatementOfPurpose,ProposalSummary,AnalysisAndRecommendations)%>%
summarise(Programs=paste(unique(Program),collapse=", "))
View(joinedText)
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Data and Reports - Documents/Raw")
write.csv(joinedText, "JoinedText.csv", row.names = FALSE)
---
title: "Arlington Trees"
author: "Rich Carder"
date: "March 31, 2020"
output: html_document
---
#install.packages("lwgeom")
#install.packages("dplyr")
#remotes::install_github("r-lib/tidyselect")
#install.packages("googlesheets4")
#install.packages("formattable")
#install.packages("htmltools")
#install.packages("geojsonio")
install.packages("vctrs")
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(DescTools)
library(devtools)
library(fitdistrplus)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(rlang)
library(mapdata)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(ggalluvial)
library(waffle)
library(directlabels)
library(urbnmapr)
library(statebins)
library(rworldmap)
library(tidyverse)
library(tidyselect)
library(googlesheets4)
library(formattable)
library(kableExtra)
library(ggthemes)
library(knitr)
library(tidycensus)
library(htmltools)
library(webshot)
library(sf)
library(haven)
library(jsonlite)
library(geojsonio)
library(lwgeom)
#This script extracts ACS 5-year estimates at the block group (or any larger
#geography) using the tidycensus package. To run tidycensus, you first need
#to set up a Census API key and run census_api_key(). Set working directory
#to where you want output files to save, or use the collect_acs_data function
#to set a different outpath.
#
setwd("C:/Users/rcarder/downloads")
canopy <- st_read("Tree_Canopy_2016_Polygons-shp")
buildings <- st_read("Building_Polygons-shp")
setwd("C:/Users/rcarder/Documents/dev/ArlingtonTrees")
census_api_key('b2e47f1f1e9c7115a34a02992c149628712ecff8', install=TRUE, overwrite = TRUE)
#if (!require("pacman")) install.packages("pacman")
#pacman::p_load(tidyverse, tidycensus, viridis,stringr,dplyr,knitr,DT,datasets)
#For code to run, need to first set up Census API key and run census_api_key()
acs_table <- load_variables(2018, "acs5", cache = TRUE)
language <- get_acs(geography = 'block group',
variables = c('B16001_001','B16001_002','B16001_003','B16001_004','B16001_005',
'B16001_075','B16001_006'),
year = 2013, state = 'Virginia',county="Arlington County", geometry = FALSE) %>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
tot_population_language=B16001_001,
only_english_pct = B16001_002/tot_population_language,
any_other_than_english_pct = 1-(B16001_002/tot_population_language),
spanish_pct=B16001_003/tot_population_language,
french_pct=B16001_006/tot_population_language,
chinese_pct=B16001_075/tot_population_language,
spanish_with_english_pct=B16001_004/tot_population_language,
spanish_no_english_pct=B16001_005/tot_population_language) %>%
dplyr::select(-c(NAME))
age <- get_acs(geography = 'block group',
variables = c(sapply(seq(1,49,1), function(v) return(paste("B01001_",str_pad(v,3,pad ="0"),sep="")))),
year = 2018, state = "Virginia",county = "Arlington County", geometry = FALSE)%>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
denom = B01001_001,
age_under30_ma = dplyr::select(., B01001_007:B01001_011) %>% rowSums(na.rm = TRUE),
# age_25_64_ma = dplyr::select(., B01001_011:B01001_019) %>% rowSums(na.rm = TRUE),
age_over65_ma = dplyr::select(., B01001_020:B01001_025) %>% rowSums(na.rm = TRUE),
age_under30_fe = dplyr::select(., B01001_031:B01001_035) %>% rowSums(na.rm = TRUE),
#age_25_64_fe = dplyr::select(., B01001_035:B01001_043) %>% rowSums(na.rm = TRUE),
age_over65_fe = dplyr::select(., B01001_044:B01001_049) %>% rowSums(na.rm = TRUE),
age_pct_under30 = (age_under30_ma + age_under30_fe)/denom,
#age_pct_25_64 = (age_25_64_ma + age_25_64_fe)/denom,
age_pct_over65 = (age_over65_ma + age_over65_fe)/denom
) %>%
dplyr::select(-starts_with("B0"))%>%dplyr::select(-ends_with("_ma")) %>% dplyr::select(-ends_with("_fe")) %>% dplyr::select(-denom)
ACS <- get_acs(geography = 'block group',
variables = c(sapply(seq(1,10,1), function(v) return(paste("B02001_",str_pad(v,3,pad ="0"),sep=""))),
'B03002_001','B03002_002','B03002_003','B03002_012','B03002_013','B02017_001',
'B19301_001', 'B17021_001', 'B17021_002',"B02001_005","B02001_004","B02001_006"),
year = 2018, state = "Virginia",county = "Arlington County", geometry = TRUE)%>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
tot_population_race = B02001_001,
pop_nonwhite=B02001_001-B02001_002,
pop_nonwhitenh=B03002_001-B03002_003,
race_pct_white = B02001_002/B02001_001,
race_pct_whitenh = B03002_003/B03002_001,
race_pct_nonwhite = 1 - race_pct_white,
race_pct_nonwhitenh = 1 - race_pct_whitenh,
race_pct_black = B02001_003/B02001_001,
race_pct_aapi = (B02001_005+B02001_006)/B02001_001,
race_pct_native = B02001_004/B02001_001,
race_pct_hisp = B03002_012/B03002_001) %>%
mutate(
tot_population_income = B17021_001,
in_poverty = B17021_002) %>%
mutate(
inc_pct_poverty = in_poverty/tot_population_income,
inc_percapita_income = B19301_001) %>%
left_join(language, by="GEOID")%>%
left_join(age, by="GEOID")%>%
dplyr::select(-starts_with("B0"))%>%
dplyr::select(-starts_with("B1"))
??eval_select
FullData<-ACS
FullData$area <- st_area(FullData$geometry)
##plots to test
nonwhite<-ggplot() +
geom_sf(data = FullData, aes(fill=(race_pct_nonwhitenh)),color=NA,alpha=1) +
scale_fill_gradient(low="white",high="#ffbb00",na.value="white",limits=c(min(FullData$race_pct_nonwhitenh, na.rm = TRUE), max(FullData$race_pct_nonwhitenh, na.rm = TRUE)),labels=scales::percent_format(accuracy=1))+
geom_sf(data = FullData, color = '#ffbb00', fill = NA, lwd=.1)+
labs(fill="% Non-White")+
map_theme()+
theme(legend.position = "right")+
geom_sf(data = canopy,fill="green",color=NA,alpha=.4)
install.packages("vctrs")
View(ACS)
language <- get_acs(geography = 'block group',
variables = c('B16001_001','B16001_002','B16001_003','B16001_004','B16001_005',
'B16001_075','B16001_006'),
year = 2015, state = 'Virginia',county="Arlington County", geometry = FALSE) %>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
tot_population_language=B16001_001,
only_english_pct = B16001_002/tot_population_language,
any_other_than_english_pct = 1-(B16001_002/tot_population_language),
spanish_pct=B16001_003/tot_population_language,
french_pct=B16001_006/tot_population_language,
chinese_pct=B16001_075/tot_population_language,
spanish_with_english_pct=B16001_004/tot_population_language,
spanish_no_english_pct=B16001_005/tot_population_language) %>%
dplyr::select(-c(NAME))
View(language)
language <- get_acs(geography = 'block group',
variables = c('B16001_001','B16001_002','B16001_003','B16001_004','B16001_005',
'B16001_075','B16001_006'),
year = 2012, state = 'Virginia',county="Arlington County", geometry = FALSE) %>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
tot_population_language=B16001_001,
only_english_pct = B16001_002/tot_population_language,
any_other_than_english_pct = 1-(B16001_002/tot_population_language),
spanish_pct=B16001_003/tot_population_language,
french_pct=B16001_006/tot_population_language,
chinese_pct=B16001_075/tot_population_language,
spanish_with_english_pct=B16001_004/tot_population_language,
spanish_no_english_pct=B16001_005/tot_population_language) %>%
dplyr::select(-c(NAME))
language <- get_acs(geography = 'block group',
variables = c('B16001_001','B16001_002','B16001_003','B16001_004','B16001_005',
'B16001_075','B16001_006'),
year = 2018, state = 'Virginia',county="Arlington County", geometry = FALSE) %>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
tot_population_language=B16001_001,
only_english_pct = B16001_002/tot_population_language,
any_other_than_english_pct = 1-(B16001_002/tot_population_language),
spanish_pct=B16001_003/tot_population_language,
french_pct=B16001_006/tot_population_language,
chinese_pct=B16001_075/tot_population_language,
spanish_with_english_pct=B16001_004/tot_population_language,
spanish_no_english_pct=B16001_005/tot_population_language) %>%
dplyr::select(-c(NAME))
age <- get_acs(geography = 'block group',
variables = c(sapply(seq(1,49,1), function(v) return(paste("B01001_",str_pad(v,3,pad ="0"),sep="")))),
year = 2015, state = "Virginia",county = "Arlington County", geometry = FALSE)%>%
dplyr::select(-moe) %>%
spread(key = 'variable', value = 'estimate') %>%
mutate(
denom = B01001_001,
age_under30_ma = dplyr::select(., B01001_007:B01001_011) %>% rowSums(na.rm = TRUE),
# age_25_64_ma = dplyr::select(., B01001_011:B01001_019) %>% rowSums(na.rm = TRUE),
age_over65_ma = dplyr::select(., B01001_020:B01001_025) %>% rowSums(na.rm = TRUE),
age_under30_fe = dplyr::select(., B01001_031:B01001_035) %>% rowSums(na.rm = TRUE),
#age_25_64_fe = dplyr::select(., B01001_035:B01001_043) %>% rowSums(na.rm = TRUE),
age_over65_fe = dplyr::select(., B01001_044:B01001_049) %>% rowSums(na.rm = TRUE),
age_pct_under30 = (age_under30_ma + age_under30_fe)/denom,
#age_pct_25_64 = (age_25_64_ma + age_25_64_fe)/denom,
age_pct_over65 = (age_over65_ma + age_over65_fe)/denom
) %>%
dplyr::select(-starts_with("B0"))%>%dplyr::select(-ends_with("_ma")) %>% dplyr::select(-ends_with("_fe")) %>% dplyr::select(-denom)
setwd("C:/Users/rcarder/Documents/dev/ArlingtonTrees")
write.csv(ACS,"ArlingtonDemographics.csv",row.names = FALSE)
